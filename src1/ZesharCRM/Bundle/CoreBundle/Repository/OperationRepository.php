<?php

namespace ZesharCRM\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use ZesharCRM\Bundle\CoreBundle\Entity\LeadCategory;
use ZesharCRM\Bundle\CoreBundle\Entity\LeadSubject;
use ZesharCRM\Bundle\CoreBundle\Entity\User;
use ZesharCRM\Bundle\GoalsBundle\Entity\Goal;
use ZesharCRM\Bundle\CoreBundle\Enum\OperationType;
use ZesharCRM\Bundle\CoreBundle\Enum\OpportunityStatus;
use ZesharCRM\Bundle\CoreBundle\Repository\WidgetRepository;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * OperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OperationRepository extends EntityRepository
{

    public function getOperationData($user)
    {
        $company = $user->getCompany();
        $isAll = WidgetRepository::isShowAllData($user);
        $currentTime = new \DateTime('today');
        $startTime = clone $currentTime->modify('first day of this month');
        $finishTime = clone $currentTime->modify('last day of this month');
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Operation', 'v')
            ->leftJoin('v.performer', 'u')
            ->andWhere('u.company = :company')
            ->andWhere('v.performedAt >= :startTime', 'v.performedAt <= :endTime')
            ->setParameters(array('startTime' => $startTime,'endTime' => $finishTime, 'company' => $company));
        if(!$isAll){
            $qb
                ->andWhere('v.performer ='.$user->getId())
            ;
        }
        return  $qb->getQuery()->getResult();
    }

    public function getCountByTypeOperationData($user)
    {
        $company = $user->getCompany();
        $isAll = WidgetRepository::isShowAllData($user);
        $currentTime = new \DateTime('today');
        $startTime = clone $currentTime->modify('first day of this month');
        $finishTime = clone $currentTime->modify('last day of this month');
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(v.id)', 'v.operationType')
            ->from('ZesharCRMCoreBundle:Operation', 'v')
            ->leftJoin('v.performer', 'u')
            ->andWhere('u.company = :company')
            ->andWhere('v.performedAt >= :startTime', 'v.performedAt <= :endTime')
            ->setParameters(array('startTime' => $startTime,'endTime' => $finishTime, 'company' => $company))
            ->groupBy('v.operationType');
        if(!$isAll){
            $qb
                ->andWhere('v.performer ='.$user->getId())
            ;
        }
        return  $qb->getQuery()->getResult();
    }

    public function getCountByTypeAllOperationData($user)
    {
        $company = $user->getCompany();
        $isAll = WidgetRepository::isShowAllData($user);
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(v.id)', 'v.operationType')
            ->from('ZesharCRMCoreBundle:Operation', 'v')
            ->leftJoin('v.performer', 'u')
            ->andWhere('u.company = :company')
            ->setParameters(array('company' => $company))
            ->groupBy('v.operationType')
        ;
        if(!$isAll){
            $qb
                ->andWhere('v.performer ='.$user->getId())
            ;
        }
        return  $qb->getQuery()->getResult();
    }

    public function getClearOperationData($user)
    {
        $isAll = WidgetRepository::isShowAllData($user);
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Operation', 'v');
        if(!$isAll){
            $qb
                ->andWhere('v.performer ='.$user->getId())
            ;
        }
//        print_r($qb->getQuery()->getResult());die;
        return  $qb->getQuery()->getResult();
    }

    public function getPrevYearPerformance($year)
    {
        $finishAt = $year->format('Y');
        $startAt = $year->modify('-1 year')->format('Y');
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Operation', 'v')
            ->andWhere( 'v.performedAt >= :startTime', 'v.performedAt < :endTime', 'v.operationType = :type')
            ->setParameters(array('startTime' => $startAt,'endTime' => $finishAt, 'type' => OperationType::SUCCESS_QUOTE));

        return  $qb->getQuery()->getResult();

    }

    public function getCountOperationsByType($type, $user, $product)
    {
        $isAll = WidgetRepository::isShowAllData($user);
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(v)')
            ->from('ZesharCRMCoreBundle:Operation', 'v')
            ->leftJoin('v.entity', 'en')
            ->where('v.operationType = :type')
            ->andWhere('en.leadCategory = :product')
            ->setParameters(array('type' => $type, 'product' => $product));
        if(!$isAll){
            $qb
                ->andWhere('v.performer ='.$user->getId())
            ;
        }
        $count = $qb->getQuery()->getResult();

        return $count[0][1];
    }

    public function getSoldGoalsGroupProductByDate($user, $month, $year)
    {

        /* $qb = $this->getEntityManager()
             ->createQueryBuilder()
             ->select('ga.items, v.title, v.id as productId, COUNT(op.id) as soldItems')
             ->from('ZesharCRMGoalsBundle:GoalAssign', 'ga')
             ->leftJoin('ga.goal', 'g', 'WITH', 'ga.user = :user')
             ->leftJoin('g.goalCategory', 'v')
             ->leftJoin('v.lead', 'lead')
             ->leftJoin('lead.operations', 'op', 'WITH', 'lead.id = op.entity AND op.operationType = :type AND op.performer = :user')
             ->andWhere('MONTH(op.performedAt) = :month AND YEAR(op.performedAt) = :year')
             ->groupBy('v.id')
             ->setParameters(array('type' => OperationType::SUCCESS_QUOTE, 'user' => $user->getId(), 'month' => $month, 'year' => $year));
         $result = $qb->getQuery()->getResult();*/

        $isAll = WidgetRepository::isShowAllData($user);
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('ga.items, v.title, v.id as productId, COUNT(campaign.id) as campaignCount, COUNT(source.id) as sourceCount')
            ->from('ZesharCRMGoalsBundle:GoalAssign', 'ga')
            ->leftJoin('ga.goal', 'g')
            ->leftJoin('g.goalCategory', 'v')
            ->leftJoin('v.lead', 'lead');
        $preMonth = $month;
        //if ($preMonth != 1) {
        for ($i = $preMonth; $i > 0; $i--) {
            $qb->addSelect('COUNT(op'.$i.'.id) as soldItems'.$i)
                ->leftJoin('lead.operations', 'op'.$i, 'WITH', 'lead.id = op'.$i.'.entity AND op'.$i.'.operationType = :type'.$i.' AND op'.$i.'.performer = :user'.$i.' AND MONTH(op'.$i.'.performedAt) = :month'.$i.' AND YEAR(op'.$i.'.performedAt) = :year'.$i)
                ->setParameter('month'.$i, $i)
                ->setParameter('year'.$i, $year)
                ->setParameter('type'.$i, OperationType::SUCCESS_QUOTE)
                ->setParameter('user'.$i, $user->getId());
            if ($i == $month) {
                $qb->leftJoin('op'.$i.'.entity', 'resultLead')
                    ->leftJoin('resultLead.leadCampaign', 'campaign')
                    ->leftJoin('resultLead.leadSource', 'source');
            }
        }

//        $qb->leftJoin('lead.operations', 'operationLead', 'WITH', 'lead.id = operationLead.entity AND operationLead.operationType = :typeOperationLead AND operationLead.performer = :user AND MONTH(operationLead.performedAt) = :month AND YEAR(operationLead.performedAt) = :year');
//        $qb->leftJoin('operationLead.entity', 'leadOnLastMonth');
//
//        $qb->leftJoin('lead.operations', 'operationOpportunity', 'WITH', 'lead.id = operationOpportunity.entity AND operationOpportunity.operationType = :typeOperationOpportunity AND operationOpportunity.performer = :user AND MONTH(operationOpportunity.performedAt) = :month AND YEAR(operationOpportunity.performedAt) = :year');
        //$qb->leftJoin('lead.operations', 'operationQuote', 'WITH', 'lead.id = operationQuote.entity AND operationQuote.operationType = :typeOperationQuote AND operationQuote.performer = :user AND MONTH(operationQuote.performedAt) = :month AND YEAR(operationQuote.performedAt) = :year');


        $qb->groupBy('v.id');
//            ->setParameter('month', $month)
//            ->setParameter('year', $year)
//            ->setParameter('user', $user->getId());
//            ->setParameter('typeOperationCold', OperationType::LEAD)
//            ->setParameter('typeOperationWarm', OperationType::COLD_TO_WARM_LEAD)
//            ->setParameter('typeOperationHot', OperationType::HOT_LEAD);
        if(!$isAll){
            $qb
                ->andWhere('ga.user ='.$user->getId())
            ;
        }
        $result = $qb->getQuery()->getResult();

        return $result;

    }

    public function getChildEntityByUserAndDate($user, $month, $year, $propertyTitle)
    {
        $isAll = WidgetRepository::isShowAllData($user);
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('childEntity.title, childEntity.id, COUNT(op.id) as soldItems, COUNT(opLost.id) as lostItems, COUNT(opOpportunity.id) as opportunityItems, COUNT(opQuote.id) as quoteItems')
            ->from('ZesharCRMGoalsBundle:GoalAssign', 'ga')
            ->leftJoin('ga.goal', 'g')
            ->leftJoin('g.goalCategory', 'v')
            ->leftJoin('v.lead', 'lead')
            ->leftJoin('lead.operations', 'op', 'WITH', 'lead.id = op.entity AND op.operationType = :type AND op.performer = :user AND MONTH(op.performedAt) = :month AND YEAR(op.performedAt) = :year')
            ->leftJoin('lead.operations', 'opLost', 'WITH', 'lead.id = opLost.entity AND opLost.operationType = :typeLost AND opLost.performer = :user AND MONTH(opLost.performedAt) = :month AND YEAR(opLost.performedAt) = :year')
            ->leftJoin('lead.operations', 'opLead', 'WITH', 'lead.id = opLead.entity AND (opLead.operationType = :typeLead) AND opLead.performer = :user AND MONTH(opLead.performedAt) = :month AND YEAR(opLead.performedAt) = :year')
            ->leftJoin('lead.operations', 'opOpportunity', 'WITH', 'lead.id = opOpportunity.entity AND opOpportunity.operationType = :typeOpportunity AND opOpportunity.performer = :user AND MONTH(opOpportunity.performedAt) = :month AND YEAR(opOpportunity.performedAt) = :year')
            ->leftJoin('lead.operations', 'opQuote', 'WITH', 'lead.id = opQuote.entity AND opQuote.operationType = :typeQuote AND opQuote.performer = :user AND MONTH(opQuote.performedAt) = :month AND YEAR(opQuote.performedAt) = :year')
            //->leftJoin('op.entity', 'resultLead')
            ->leftJoin('lead.'.$propertyTitle, 'childEntity')
            ->groupBy('childEntity.id ')
            ->setParameters(array(
                'type' => OperationType::SUCCESS_QUOTE,
//                'typeLead' => OperationType::SUCCESS_QUOTE,
                'typeLost' => OperationType::CANCELLED_OPPORTUNITY,
                'typeOpportunity' => OperationType::LEAD_TO_OPPORTUNITY,
                'typeQuote' => OperationType::OPPORTUNITY_TO_QUOTE,
                'month' => $month,
                'year' => $year));
        if(!$isAll){
            $qb
                ->andWhere('ga.user ='.$user->getId())
            ;
        }
        $result = $qb->getQuery()->getResult();
        //print_r($result);die;

        return $result;
    }

    public function getProductsForWidget($user)
    {
        $isAll = WidgetRepository::isShowAllData($user);

//        $rsm = new ResultSetMapping;
//        $rsm->addEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\LeadCategory', 'lc');
//        $rsm->addFieldResult('lc', 'id', 'id');
//        $rsm->addFieldResult('lc', 'title', 'title');
//        $rsm->addJoinedEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\LeadSubject' , 'ls', 'lc', 'lead');
//        $rsm->addJoinedEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\Opportunity' , 'opp', 'ls', 'opportunity');
//
//        $qString = '
//                SELECT lc.id, lc.title
//                FROM lead_category lc
//                LEFT JOIN lead_subject ls ON lc.id = ls.lead_category AND (((ls.lead_category IS NOT NULL AND ls.discr = "lead") OR ls.created_at <> ls.updated_at) OR (ls.discr = "opportunity" AND ls.status <> 7 ))
//                AND ls.status = "'.OpportunityStatus::SUCCESS_QUOTE.'"
//        ';
//
//        if(!$isAll){
//            $qString .= '
//                LEFT JOIN opportunity opp ON ls.id = opp.lead AND opp.assignee = "'.$user->getId().'"'
//            ;
//        }

        $rsm = new ResultSetMapping;
        $rsm->addEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\LeadCategory', 'lc');
        $rsm->addFieldResult('lc', 'id', 'id');
        $rsm->addFieldResult('lc', 'title', 'title');
        $rsm->addJoinedEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\User' , 'u', 'lc', 'creator');
        $rsm->addJoinedEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\LeadSubject' , 'ls', 'lc', 'lead');
        $rsm->addJoinedEntityResult('ZesharCRM\Bundle\CoreBundle\Entity\Opportunity' , 'opp', 'ls', 'opportunity');

        $company = $user->getCompany();

        $qString = '
                SELECT lc.id, lc.title
                FROM lead_category lc
                LEFT JOIN fos_user u ON lc.creator = u.id
                LEFT JOIN lead_subject ls ON lc.id = ls.lead_category AND (((ls.lead_category IS NOT NULL AND ls.discr = "lead") OR ls.created_at <> ls.updated_at) OR (ls.discr = "opportunity" AND ls.status <> 7 ))
                LEFT JOIN operation oper1 ON ls.id = oper1.entity AND oper1.operation_type = "'.OperationType::LEAD_TO_OPPORTUNITY.'"
                LEFT JOIN operation oper2 ON ls.id = oper2.entity AND oper2.operation_type = "'.OperationType::SUCCESS_QUOTE.'"
                WHERE u.company = "'.$company->getId().'"
        ';

        if(!$isAll){
            $qString .= 'AND oper1.performer = "'.$user->getId().'" OR oper2.performer = "'.$user->getId().'" ';
        }

        $qString .= ' GROUP BY lc.id';

        $query = $this->getEntityManager()->createNativeQuery($qString, $rsm);

        $products = $query->getResult();


        $productsArr = array();
        if(!empty($products)){
            foreach($products as $key=>$product){
                $premiumSum = 0;
                /** @var $product LeadCategory */
                $productsArr[$key]['id'] = $product->getId();
                $productsArr[$key]['title'] = $product->getTitle();
                $productsArr[$key]['items'] = 0;
                $productsArr[$key]['soldItems'] = 0;
                $productsArr[$key]['value'] = 0;
                $leadSubjects = $product->getLead();

                $qb = $this->getEntityManager()
                    ->createQueryBuilder()
                    ->select('goal.id as id')
                    ->from('ZesharCRMGoalsBundle:Goal', 'goal')
                    ->leftJoin('goal.goalCategory', 'leadCategory')
                    ->where('leadCategory.title = :goal')
                    ->setParameters(array('goal' => $product->getTitle()))
                    ->groupBy('leadCategory.id')
                ;
                $goalObjts = $qb->getQuery()->getResult();

                if($goalObjts){
                    foreach($goalObjts as $goalObj){
                        $goalId = $goalObj['id'];

                        if(!$isAll){
                            $findArr = array('goal' => $goalId, 'user' => $user->getId());
                        }else{
                            $findArr = array('goal' => $goalId);
                        }
                        $goalAssigners = $this->getEntityManager()->getRepository('ZesharCRMGoalsBundle:GoalAssign')->findBy($findArr);

                        if($goalAssigners){
                            foreach($goalAssigners as $goalAssign){
                                $productsArr[$key]['items'] += $goalAssign->getItems();
                            }
                        }
                    }
                }

//                if(!empty($leadSubjects)){
//                    foreach($leadSubjects as $leadSub){
//                        /** @var $leadSub LeadSubject */
//                        $qb = $this->getEntityManager()
//                            ->createQueryBuilder()
//                            ->select('sum(opp.premium) as value')
//                            ->from('ZesharCRMCoreBundle:Opportunity', 'opp')
//                            ->where('opp.id = :leadSubId')
//                            ->setParameters(array('leadSubId' => $leadSub->getId()))
//                            ->groupBy('opp.id')
//                        ;
//                        $premiums = $qb->getQuery()->getResult();
//
//                        if($premiums){
//                            $productsArr[$key]['value'] += round($premiums[0]['value'], 2);
//                        }
//                        $em = $this->getEntityManager();
//                        /** @var $leadsRepository LeadSubjectRepository */
//                        $leadsRepository = $em->getRepository('ZesharCRMCoreBundle:LeadSubject');
//                        $leadsRepository->findBy(array('status' => OpportunityStatus::SUCCESS_QUOTE, ))
//
////                        $qb = $this->getEntityManager()
////                            ->createQueryBuilder()
////                            ->select('count(op.id) as soldItems')
////                            ->from('ZesharCRMCoreBundle:Operation', 'op')
////                            ->where('op.entity = :leadSubId')
////                            ->andWhere('op.operationType = :type2')
////                            ->setParameters(array('leadSubId' => $leadSub->getId(), 'type2' => OperationType::SUCCESS_QUOTE))
////                            ->groupBy('op.id')
////                        ;
////                        $types2 = $qb->getQuery()->getResult();
//                        if($types2){
//                            $productsArr[$key]['soldItems'] += $types2[0]['soldItems'];
//                        }
//                    }
//                    if($productsArr[$key]['items'] >= round($productsArr[$key]['soldItems']) ){
//                        $productsArr[$key]['items'] -= round($productsArr[$key]['soldItems']);
//                    }else{
//                        $productsArr[$key]['items'] = 0;
//                    }
//                }
                $productsArr[$key]['items'] = round($productsArr[$key]['items']);
                $productsArr[$key]['value'] = number_format($productsArr[$key]['value'], 2, '.', ',');
            }
        }

        return $productsArr;
    }

    public function getGoalsForWidget($user)
    {
        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('leadCategory.title as title')
            ->from('ZesharCRMGoalsBundle:Goal', 'goal')
            ->leftJoin('goal.goalCategory', 'leadCategory')
            ->leftJoin('leadCategory.creator' , 'u')
            ->andWhere('u.company = :company')
            ->leftJoin('goal.assignments', 'ass')
            ->andWhere('ass.assignee = :user')
            ->setParameters(array('user' => $user->getId(), 'company' => $company))
            ->groupBy('leadCategory.id')
        ;

        $goals = $qb->getQuery()->getResult();

        return $goals;
    }

    //    public function getCampaignsByUserAndDate($user, $month, $year)
//    {
//        $qb = $this->getEntityManager()
//            ->createQueryBuilder()
//            ->select('ga.items, v.title, v.id as productId, COUNT(op.id) as soldItems')
//            ->from('ZesharCRMGoalsBundle:GoalAssign', 'ga')
//            ->leftJoin('ga.goal', 'g', 'WITH', 'ga.user = :user')
//            ->leftJoin('g.goalCategory', 'v')
//            ->leftJoin('v.lead', 'lead')
//            ->leftJoin('lead.operations', 'op', 'WITH', 'lead.id = op.entity AND op.operationType = :type AND op.performer = :user')
//            ->andWhere('MONTH(op.performedAt) = :month AND YEAR(op.performedAt) = :year')
//            ->groupBy('v.id')
//            ->setParameters(array('type' => OperationType::SUCCESS_QUOTE, 'user' => $user->getId(), 'month' => $month, 'year' => $year));
//        $result = $qb->getQuery()->getResult();
//        /*$qb = $this->getEntityManager()
//            ->createQueryBuilder()
//            ->select('COUNT(campaign.id)')
//            ->from('ZesharCRMCoreBundle:LeadSubject', 'ls')
//            //->from('ZesharCRMCoreBundle:LeadCampaign', 'campaign')
//            ->where('ls.')*/
//    }
//


    public function getOperationsPerUser($type1, $type2, $user = null)
    {
        $qb = $this->getQueryPerUserByType($type1, $type2, $user);
        $products = $qb->getQuery()->getResult();

        return $products;
    }

    public function getOperationsPerUserByCategory($type1, $type2, $category, $user = null)
    {
        $qb = $this->getQueryPerUserByType($type1, $type2, $user);
        $qb ->leftJoin('op1.entity', 'e1')
            ->leftJoin('op2.entity', 'e2')
            ->andWhere('e1.leadCategory = :cat1')//OR e1.leadCategory IS NULL
            ->andWhere('e2.leadCategory = :cat2')//OR e2.leadCategory IS NULL
        ;
        $qb->setParameter('cat1', $category->getId());
        $qb->setParameter('cat2', $category->getId());

        $products = $qb->getQuery()->getResult();

        return $products;
    }

    public function getOperationsPerUserBySource($type1, $type2, $source, $user = null)
    {
        $qb = $this->getQueryPerUserByType($type1, $type2, $user);
        $qb ->leftJoin('op1.entity', 'e1')
            ->leftJoin('op2.entity', 'e2')
            ->andWhere('e1.leadSource = :val1')
            ->andWhere('e2.leadSource = :val2')
        ;
        $qb->setParameter('val1', $source->getId());
        $qb->setParameter('val2', $source->getId());

        $products = $qb->getQuery()->getResult();

        return $products;
    }

    public function getOperationsPerUserByActivity($type1, $type2, $activity, $user = null)
    {
        $qb = $this->getQueryPerUserByType($type1, $type2, $user);
        $qb ->leftJoin('op1.entity', 'e1')
            ->leftJoin('op2.entity', 'e2')
            ->andWhere('e1.leadCampaign = :val1')
            ->andWhere('e2.leadCampaign = :val2')
        ;
        $qb->setParameter('val1', $activity->getId());
        $qb->setParameter('val2', $activity->getId());

        $products = $qb->getQuery()->getResult();

        return $products;
    }

    public function calcQuotingRate($user)
    {
        $leadsMadeOpportunity = $this->getAllLeadsByOperation(OperationType::LEAD_TO_OPPORTUNITY, $user);
        $leadsMadeQuote = $this->getAllLeadsByOperation(OperationType::OPPORTUNITY_TO_QUOTE, $user);
        $quoteTotal = 0;
        foreach ($leadsMadeQuote as $lead) {
            $quoteTotal += $lead['lead']->getQuantity();
        }
        if (count($leadsMadeOpportunity) == 0) {
            return 'N/A';
        }
        return $quoteTotal/count($leadsMadeOpportunity)*100;
    }

    public function calcClosingRate($user) {
        $leadsMadeQuote = $this->getAllLeadsByOperation(OperationType::OPPORTUNITY_TO_QUOTE, $user);
        $leadsMadeSuccess = $this->getAllLeadsByOperation(OperationType::SUCCESS_QUOTE, $user);
        $quoteTotal = 0;
        foreach ($leadsMadeQuote as $lead) {
            $quoteTotal += $lead['lead']->getQuantity();
        }
        $successTotal = 0;
        foreach ($leadsMadeSuccess as $lead) {
            $successTotal += $lead['lead']->getQuantity();
        }

        if ($quoteTotal == 0) {
            return 'N/A';
        }
        return $successTotal/$quoteTotal*100;
    }



    public function getAllLeadsByOperation($operationType, User $performedBy = null)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('l as lead')
            ->from('ZesharCRMCoreBundle:LeadSubject', 'l')
            ->leftJoin('ZesharCRMCoreBundle:Operation', 'op', 'WITH', 'op.entity = l.id')
            ->where('op.operationType = '. $operationType);
        if ($performedBy instanceof User) {
            $qb->andWhere('op.performer = '.$performedBy->getId());
        }
        return $qb->getQuery()->getResult();
    }

    public function getOperationsPerEntityByUser($type1, $type2, $user, $entityName){
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('e AS entity, COUNT(DISTINCT op1.id) as type1Count, COUNT(DISTINCT op2.id) as type2Count')
            ->from('ZesharCRMCoreBundle:' . $entityName, 'e')
            ->leftJoin('e.lead', 'ls')
            ->leftJoin('ls.operations', 'op1', 'WITH', 'op1.operationType = :type1 AND op1.performer = :user')
            ->leftJoin('ls.operations', 'op2', 'WITH', 'op2.operationType = :type2 AND op2.performer = :user')
            ->groupBy('e.id')
            ->setParameters(array('type1' => $type1, 'type2' => $type2, 'user' => $user->getId()));

        return $qb->getQuery()->getResult();
    }

    protected function getQueryPerUserByType($type1, $type2, $user = null)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u AS user, COUNT(DISTINCT op1.id) as type1Count, COUNT(DISTINCT op2.id) as type2Count')
            ->from('ZesharCRMCoreBundle:User', 'u')
            ->leftJoin('u.performedOperations', 'op1', 'WITH', 'u.id = op1.performer AND op1.operationType = :type1')
            ->leftJoin('u.performedOperations', 'op2', 'WITH', 'u.id = op2.performer AND op2.operationType = :type2')
            ;
        if($user){
            $company = $user->getCompany();
            $qb
                ->where('u.company = '.$company->getId() .'')
            ;
        }
        $qb
            ->groupBy('u.id')
            ->setParameters(array('type1' => $type1, 'type2' => $type2, ));
        return $qb;
    }

    public function getSoldItemsByUser($user)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('count(op.id) as soldItems')
            ->from('ZesharCRMGoalsBundle:GoalAssign', 'ga')
            ->leftJoin('ga.goal', 'g')
            ->leftJoin('g.goalCategory', 'v')
            ->leftJoin('v.lead', 'lead')
            ->leftJoin('lead.operations', 'op', 'WITH', 'lead.id = op.entity AND op.operationType = :type AND op.performer = :user')
            ->andWhere('ga.user = :user')
            ->groupBy('ga.id ')
            ->setParameters(array(
                    'type' => OperationType::SUCCESS_QUOTE,
                    'user' => $user->getId()
                )
            );

        $result = $qb->getQuery()->getResult();
        //print_r($result);die;

        return $result;
    }


    /*    public function getCountOperationsByTypeForUser($type, $u)
        {
            $$qb = $this->getEntityManager()
              ->createQueryBuilder()
              ->select('u AS user, COUNT(op1.id) as type1Count, COUNT(op2.id) as type2Count')
              ->from('ZesharCRMCoreBundle:User', 'u')
    //          ->leftJoin('v.lead', 'lead')
              ->rightJoin('u.performedOperations', 'op1', 'WITH', 'u.id = op1.performer AND op1.operationType = :type1')
              ->rightJoin('u.performedOperations', 'op2', 'WITH', 'u.id = op2.performer AND op2.operationType = :type2')
              ->groupBy('u.id')
              ->setParameters(array('type1' => $type1, 'type2' => $type2));
            print_r($qb->getQuery()->getSQL());

            return $count[0][1];
        }*/
}
