<?php

namespace ZesharCRM\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use ZesharCRM\Bundle\CoreBundle\Entity\User;
use ZesharCRM\Bundle\CoreBundle\Entity\Activity;
use ZesharCRM\Bundle\CoreBundle\Enum\ActivityStatus;
use ZesharCRM\Bundle\CoreBundle\Enum\OpportunityStatus;
use ZesharCRM\Bundle\CoreBundle\Enum\LeadContactStatus;
use ZesharCRM\Bundle\CoreBundle\Repository\WidgetRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends EntityRepository
{
    public function getExpiredActivity() {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Activity', 'v')
            ->andWhere( 'v.finishesAt < :now')
            ->setParameters(array('now' => new \DateTime()));
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function getUserActivityData($user) {
        $isAll = WidgetRepository::isShowAllData($user);
        $date = new \DateTime();
        $timestamp = $date->getTimestamp();
        $now = date("Y-m-d H:i:s" , $timestamp);

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Activity', 'v')
            ->andWhere('v.startsAt < :tomorrow')
            ->andWhere('v.finishesAt >= :now')
            ->leftJoin('v.creator', 'u')
            ->andWhere('u.company = :company')
            ;
        if(!$isAll){
            $qb
                ->andWhere('v.assignee ='.$user->getId())
            ;
        }
        $qb->setParameters(array('tomorrow' => new \DateTime('tomorrow'), 'now' => $now, 'company' => $company));

        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getAllNonExpiredUserActivityData($user) {
        $isAll = WidgetRepository::isShowAllData($user);
        $date = new \DateTime();
        $timestamp = $date->getTimestamp();
        $now = date("Y-m-d H:i:s" , $timestamp);

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Activity', 'v')
            ->andWhere('v.finishesAt >= :now')
            ->leftJoin('v.creator', 'u')
            ->andWhere('u.company = :company')
        ;
        if(!$isAll){
            $qb
                ->andWhere('v.assignee ='.$user->getId())
            ;
        }
        $qb->setParameters(array('now' => $now, 'company' => $company));

        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getUserActivityUpcomingData($user) {
        $isAll = WidgetRepository::isShowAllData($user);
        $datetime = new \DateTime('today');
        $timedate = new \DateTime('today');
        $today = $datetime;
        $twoDaysAfterTomorrow = $timedate->modify('+4 day');

        $date = new \DateTime();
        $timestamp = $date->getTimestamp();
        $now = date("Y-m-d H:i:s" , $timestamp);

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v')
            ->from('ZesharCRMCoreBundle:Activity', 'v')
            ->andWhere('v.startsAt > :today', 'v.startsAt <= :twoDaysAfterTomorrow')
            ->andWhere('v.finishesAt >= :now')
            ->orderBy('v.startsAt', 'ASC')
            ->leftJoin('v.creator', 'u')
            ->andWhere('u.company = :company')
            ->setParameters(array('today' => $today,'twoDaysAfterTomorrow' => $twoDaysAfterTomorrow, 'now' => $now, 'company' => $company));
        if(!$isAll){
            $qb
                ->andWhere('v.assignee ='.$user->getId())
            ;
        }
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getUserEventsData($user)
    {
        $isAll = WidgetRepository::isShowAllData($user);

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('le.happensAt as time, l.name as name, l.id as lead, t.title as type, cc.firstName as firstName, cc.middleInitial as middleName, cc.lastName as lastName, le.location as location')
            ->from('ZesharCRMCoreBundle:User', 'u')
            ->andWhere('u.company = :company')
            ->leftJoin('u.assignedLeads', 'l')
            ->leftJoin('l.leadEvents', 'le')
            ->andWhere('le.happensAt >= :today')
            ->andWhere('le.happensAt < :tomorrow')
            ->leftJoin('le.type', 't')
            ->leftJoin('l.contactCard', 'cc')
            ->orderBy('le.happensAt', 'ASC')
            ->setParameters(array('today' => new \DateTime(), 'tomorrow' => new \DateTime('tomorrow'), 'company' => $company))
            ->distinct('l.id');
        if (!$isAll) {
            $qb
                ->andWhere('u.id =' . $user->getId());
        }
        $result = $qb->getQuery()->getResult();
        return $result;
    }


    public function getUserCalendarData($user) {
        $today = new \DateTime('today');
        $result = array();
        $result['today'] = $this->getUserEventsData($user);
        $result['future'] = $this->getUserEventsUpcomingData($user, false);
        $activities = $this->getAllNonExpiredUserActivityData($user);
        foreach ($activities as $activity) {
            $nearest = $this->calcNearestDates($activity, 10);
            if($nearest === null) {
                continue;
            }
            $diffToFirst =$today->diff($nearest[0]);
            if (!$diffToFirst->days) {
                $result['today'][] = array('activity' => $activity, 'time' => clone $nearest[0]);
                unset($nearest[0]);
            }
            foreach ($nearest as &$value) {
                $value = array('activity' => $activity, 'time' => $value);
            }
            $result['future'] = array_merge($result['future'], $nearest);
        }
        $sortFunc = function ($a, $b){
            if ($a['time'] == $b['time']) {
                return 0;
            }
            return ($a['time'] < $b['time']) ? -1 : 1;
        };
        usort($result['today'], $sortFunc);
        usort($result['future'], $sortFunc);
        $result['future'] = array_slice($result['future'] , 0, 10);
        return $result;
    }

    public function calcNearestDates($activity, $num) {
        $nearestDay = $this->calcNearestDateForActivity($activity);
        if ($nearestDay === null) {
            return $nearestDay;
        }
        $result = array(clone $nearestDay['day']);
        for ($i = 1; $i < $num; $i++) {
            $nearestDay['day']->modify($nearestDay['offset']);
            $result[$i] = clone $nearestDay['day'];
        }
        return $result;
    }

    private function calcNearestDateForActivity($activity) {
        $now = new \DateTime();
        $diff = $now->diff($activity['startsAt']);
        $type = $activity['frequency'];
        $nearestStartDT = null;
        $offset = "";
        switch ($type) {
            case 1:
                $nearestStartDT = new \DateTime('today');
                $offset = '+1 day';
                break;
            case 2:
                $nearestStartDT = new \DateTime('today');
                $late =  $diff->days % 7;
                if ($late) {
                    $nearestStartDT->modify(sprintf('+%s day', (7 - $late)));
                }
                $offset = '+7 day';
                break;
            case 3:
                $nearestStartDT = new \DateTime('today');
                $nearestStartDT->setDate($nearestStartDT->format('Y'), $nearestStartDT->format('m'), $activity['startsAt']->format('d'));
                $offset = '+1 month';
                break;
            case 4:
                $nearestStartDT = new \DateTime('today');
                $nearestStartDT->setDate($nearestStartDT->format('Y'), $activity['startsAt']->format('m'), $activity['startsAt']->format('d'));
                $offset = '+1 year';
                break;
        }
        if ($nearestStartDT instanceof \DateTime) {
            $nearestStartDT->setTime($activity['startTime']->format('H'), $activity['startTime']->format('i'));
            $nearestEndDT = clone $nearestStartDT;
            $nearestEndDT->setTime($activity['endTime']->format('H'), $activity['endTime']->format('i'));
            if ($nearestEndDT < $now && $now) {
                $nearestStartDT->modify($offset);
            }
            if ($nearestStartDT <= $activity['finishesAt']) {
                return array('day' => $nearestStartDT, 'offset' => $offset);
            }
        }
        return null;
    }

    /**
     * @param $user
     * @param bool $isLimitByTwoDaysAfterTomorrow
     * @return array
     */
    public function getUserEventsUpcomingData($user, $isLimitByTwoDaysAfterTomorrow = true) {
        $isAll = WidgetRepository::isShowAllData($user);
        $tomorrow = new \DateTime('tomorrow');
        $twoDaysAfterTomorrow = clone $tomorrow;
        $twoDaysAfterTomorrow->modify('+3 day');

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('le.happensAt as time, l.name as name, l.id as lead, t.title as type, cc.firstName as firstName, cc.middleInitial as middleName, cc.lastName as lastName, le.location as location')
            ->from('ZesharCRMCoreBundle:User', 'u')
            ->andWhere('u.company = :company')
            ->leftJoin('u.assignedLeads', 'l')
            ->leftJoin('l.leadEvents', 'le')
            ->andWhere('le.happensAt >= :tomorrow')
            ->leftJoin('le.type', 't')
            ->leftJoin('l.contactCard', 'cc')
            ->orderBy('le.happensAt', 'ASC')
            ->distinct('l.id')
        ;
        if(!$isAll){
            $qb
                ->andWhere('u.id ='.$user->getId())
            ;
        }
        if($isLimitByTwoDaysAfterTomorrow) {
            $qb->andWhere('le.happensAt <= :twoDaysAfterTomorrow')
                ->setParameters(array('tomorrow' => $tomorrow, 'twoDaysAfterTomorrow' => $twoDaysAfterTomorrow, 'company' => $company));
        } else {
            $qb->setMaxResults(10)
                ->setParameters(array('tomorrow' => $tomorrow, 'company' => $company));
        }
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function closeActivity(Activity $activity) {

        if (ActivityStatus::OPEN !== $activity->getStatus()) {
            throw new \BadMethodCallException('This Activity was already closed.');
        }

        $em = $this->getEntityManager();

        $activity->setStatus(ActivityStatus::CLOSED);

        $em->flush($activity);

        return $activity;
    }

    public function transferActivity(Activity $activity) {

        $em = $this->getEntityManager();

        $activity->setFinishesAt(new \DateTime('tomorrow'));

        $activity->setStartsAt(new \DateTime('tomorrow'));

        $em->flush($activity);

        return $activity;
    }

    public function getWidgetActivities($user){
        $isAll = WidgetRepository::isShowAllData($user);
        $month = date('n');
        $quote = OpportunityStatus::PENDING_QUOTE;
        $sold = OpportunityStatus::SUCCESS_QUOTE;

        $contacted = LeadContactStatus::YES;

        $date = new \DateTime();
        $timestamp = $date->getTimestamp();
        $now = date("Y-m-d H:i:s" , $timestamp);

        $company = $user->getCompany();

        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('a.title as title, COUNT(DISTINCT quotes) as quoteCount, COALESCE(SUM(DISTINCT sold.quantity), 0) as soldCount, COUNT(DISTINCT yesContacted) as yesContactedCount, COUNT(DISTINCT allContacted) as allContactedCount')
            ->from('ZesharCRMCoreBundle:Activity', 'a')
            ->where('a.startsAt < :tomorrow')
            ->andWhere( 'a.finishesAt >= :now')

            ->leftJoin('a.creator', 'u')
            ->andWhere('u.company = :company')

            ->leftJoin('a.lead', 'quotes', 'WITH', 'a.id = quotes.leadCampaign AND quotes.status = :quote')
            ->leftJoin('a.lead', 'sold', 'WITH', 'a.id = sold.leadCampaign AND  sold.status = :sold')

            ->leftJoin('a.lead', 'ls')
            ->leftJoin('ls.contactCard', 'cc')
            ->leftJoin('cc.contacts', 'yesContacted', 'WITH', 'cc.id = yesContacted.contactCard AND yesContacted.donotCall = :contacted')
            ->leftJoin('cc.contacts', 'allContacted', 'WITH', 'cc.id = allContacted.contactCard')

            ->leftJoin('a.assignee', 'ass')
            ->setParameters(array('tomorrow' => new \DateTime('tomorrow'), 'now' => $now,'quote' => $quote, 'sold' => $sold ,'contacted' => $contacted, 'company' => $company))
            ->orderBy('a.startsAt', 'ASC')
            ->groupBy('a.id')
            ->distinct('a.id')
        ;
        if(!$isAll){
            $qb
                ->andWhere('ass.id ='.$user->getId())
            ;
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }
}
